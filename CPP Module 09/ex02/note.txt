Ford-Johnson/merge-insertion algorithm note
- Algorithme en 3 étapes
- "one of the best known comparison sorts when it comes to reducing the number of comparisons."
- Binary Search? | Comparaison bitwise pour trouver plus grand/petit à l'étape ___
- Récursif à l'étape ___

** UTILISER FIND POUR CHECK SI DOUBLON LORS DU PARSING

StackOverflow: https://codereview.stackexchange.com/questions/116367/ford-johnson-merge-insertion-sort#:~:text=The%20Ford%2DJohnson%20merge%2Dinsertion,t%20paired%20with%20any%20element

Étape Wikipédia: https://en.wikipedia.org/wiki/Merge-insertion_sort

n = Le nombre d'éléments a trier
- Première étape -
Regrouper les éléments de X en n/2 paires d'éléments, arbitrairement.
Laisser un élément non apparié s'il y a un nombre impair d'éléments.

- Deuxième étape -
Effectuer n/2 comparaisons, une par paire, pour déterminer le plus grand des deux éléments de chaque paire.
Mettre le plus grand sur la droite.

- Troisième étape -
Trier récursivement les n/2 éléments. Trier les PAIRS à l'aide du plus grand.
À la fin, nous aurons une séquence de tout trier de tout les plus grands nombres ?

- Quatrième étape (?) -
Insérer au début de S l'élément qui a été apparié avec le premier et le plus petit élément de S.

- Cinquième étape (?) -
Insérer les n/2 - 1 éléments restants de X/S dans S, un à la fois, avec un ordre d'insertion
spécialement choisi et décrit ci-dessous (). Utiliser la recherche binaire dans les sous-séquences de S
(comme décrit ci-dessous) pour déterminer la position à laquelle chaque élément doit être inséré.